# Script by Bartlomiej Duda (Ikskoks)
# <GAME_NAME> (PC) <EXTENSION> script


# Ver    Date        Author               Comment
# v1.0   28.09.2025  Bartlomiej Duda      -


# idstring "\xCE\x0A\x89\x51"
# get NUMBER_OF_FILES long


# for i = 0 < NUMBER_OF_FILES
# 	get FILE_OFFSET long
# 	get FILE_SIZE long
# 	get FILE_PATH string
# 	log FILE_PATH FILE_OFFSET FILE_SIZE
# 	clog FILE_PATH FILE_OFFSET FILE_SIZE FILE_SIZE
# next i


# logging names array to memory file
# log MEMORY_FILE NAME_ARRAY_OFFSET NAME_ARRAY_SIZE
# getting name from memory file
# get NAME string MEMORY_FILE

# combining output path
# string FILE_PATH p "%s/%s/%s" ARCHIVE_NAME DIRECTORY_NAME FILE_NAME

# open multiple files
# open FDDE RFH 0
# open FDDE RFD 1

# get archive size
get ARCHIVE_SIZE asize

# reversing string 
# string DIRECTORY_NAME r DIRECTORY_NAME
# string FILE_NAME r FILE_NAME

# get string (2 variants)
# GetDString NAME NAME_LENGTH
# get FILE_PATH string

# file log
# clog FULL_OUTPUT_FILE_PATH FILE_OFFSET COMPRESSED_FILE_SIZE RAW_FILE_SIZE
# log FULL_OUTPUT_FILE_PATH FILE_OFFSET RAW_FILE_SIZE

# go to -1 offset from current position
# goto -1 0 SEEK_CUR

# go to 0 offset in memory file1 (absolute offset)
# goto 0 -1 SEEK_SET

# remove spaces (trim)
# string FILE_NAME R " " ""   

# string append
# set FILE_COUNT long 0
# set FILE_PATH string "file"
# string FILE_PATH += FILE_COUNT
# string FILE_PATH += "_out.bin"


# idstring "some magic"
# endian big
# comtype zlib
# get ARCHIVE_TYPE long
# get NUMBER_OF_MAIN_LEVEL_DIRS long
# get NUMBER_OF_FILES_AND_DIRS long
# get NUMBER_OF_FILES long
# get DIRECTORY_SIZE long
# 
# if ARCHIVE_TYPE == 196609
# 	get HEADER_CRC32 long
# 	get DIRECTORY_CRC32 long
# elif ARCHIVE_TYPE == 196608
# 	print "Archive without CRC32 check."
# else
# 	print "Error! Wrong archive type!"
# 	cleanexit
# endif
# 
# 
# set FULL_OUTPUT_FILE_PATH string ""
# set FULL_PREVIOUS_OUTPUT_FILE_PATH string ""
# 
# 
# for i = 0 < NUMBER_OF_MAIN_LEVEL_DIRS
# 	callfunction GET_ENTRY	
# next i
# 
# 
# 
# startfunction GET_ENTRY
# 	get ENTRY_SIZE long
# 	get ENTRY_TYPE byte
# 	
# 	if ENTRY_TYPE == 0 # read directory
# 		callfunction GET_DIRECTORY
# 	else if ENTRY_TYPE == 1 # read file
# 		callfunction GET_FILE
# 	else
# 		print "Error! Unknown entry type!"
# 		cleanexit
# 	endif
# endfunction
# 
# 
# 
# startfunction GET_DIRECTORY
# 	get COMPRESSION_FLAG long  # should be ignored for directories
# 	get NUM_OF_FILES_IN_DIRECTORY long
# 	get DIRECTORY_NAME_LENGTH long
# 	GetDstring DIRECTORY_NAME DIRECTORY_NAME_LENGTH
# 	
# 	set FILE_PATH_BACKUP string FULL_OUTPUT_FILE_PATH
# 	if FULL_OUTPUT_FILE_PATH != ""
# 		string FULL_OUTPUT_FILE_PATH += "\"
# 	endif
# 	string FULL_OUTPUT_FILE_PATH += DIRECTORY_NAME
# 		
# 	# read files in this directory
# 	for j = 0 < NUM_OF_FILES_IN_DIRECTORY
# 		callfunction GET_ENTRY
# 	next j
# 	
# 	set FULL_OUTPUT_FILE_PATH string FILE_PATH_BACKUP
# endfunction
# 
# 
# startfunction GET_FILE
# 	get COMPRESSION_FLAG long
# 	get COMPRESSED_FILE_SIZE long
# 	get UNCOMPRESSED_FILE_SIZE long
# 	get UNKNOWN_HASH long
# 	get FILE_OFFSET long
# 	get FILE_NAME_LENGTH long
# 	GetDString FILE_NAME FILE_NAME_LENGTH
# 	
# 	set FILE_PATH_BACKUP string FULL_OUTPUT_FILE_PATH
# 	string FULL_OUTPUT_FILE_PATH += "\"
# 	string FULL_OUTPUT_FILE_PATH += FILE_NAME
# 	
# 	
# 	if COMPRESSION_FLAG == 1
# 		clog FULL_OUTPUT_FILE_PATH FILE_OFFSET COMPRESSED_FILE_SIZE UNCOMPRESSED_FILE_SIZE
# 	else
# 		log FULL_OUTPUT_FILE_PATH FILE_OFFSET UNCOMPRESSED_FILE_SIZE
# 	endif
# 	
# 	set FULL_OUTPUT_FILE_PATH string FILE_PATH_BACKUP
# endfunction
# 
#
#
# checking signature / condition logic
#get SIGN long
#
#if SIGN == 0x58504854
# 	callfunction PRINT_AAA
#else
# 	callfunction PRINT_BBB
#endif	
#
#
#check for archive extension
#get EXT extension
#if EXT & "mod"
#    # fbmod or fifamod
#else
#    print "Error: you must select the FBMOD file"
#    cleanexit
#endif